/**
	* _mixins.scss
	*
	* Mixins and extends
	*
*/


/* MIXINS
---------------------- */

@mixin visually-hidden {
    border: 0;
    clip: rect(0 0 0 0);
    height: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    position: absolute;
	width: 1px;
	white-space: nowrap;
}

@mixin remove-tap-highlight {
	-webkit-tap-highlight-color: rgba(0, 0, 0, 0);
}

@mixin antialias-text {
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;
}

@mixin center-content {
	display: flex;
	flex-direction: column;
	align-items: center;
	justify-content: center;
}

@mixin overflow-vertical {
	overflow: hidden;
	overflow-y: auto;
	-webkit-overflow-scrolling: touch;
}

@mixin full-widthify {
	width: 100vw;
	margin-left: calc(-50vw + 50%);
	margin-right: calc(-50vw + 50%);
}


// CSS lock mixin, based on https://fvsch.com/code/css-locks/
// Basically takes a larger font size and a smaller font size and will automatically scale the font-size between the two
//
// Usage: @include responsive-font(3rem, 2rem, 1920px, 960px);
// The mixin will lock the font-size to 3 rem above 1920px, then between 1920px and 960px it will scale from 3rem to 2rem
// Any screen size below 960px the font gets locked to 2rem
//
// Usage: @include responsive-font(3rem, 2rem);
// The last two params are optional, the mixin defaults to 1440px for large and 960px for small
//
// Breakpoints should be set in pixels, font sizes can be set in rems or pixels
@function parseInt($n) {
	@return $n / ($n * 0 + 1);
}

@function unitlessPx($value) {
	$base-font-size: 16;

	@if unit($value) == "rem" {
  		@return parseInt($value) * $base-font-size;
	}
	@else {
		@return parseInt($value);
	}
}

@mixin responsive-font($font-large, $font-small, $breakpoint-large: 1440px, $breakpoint-small: 375px) {
	$large: unitlessPx($font-large);
	$small: unitlessPx($font-small);
	$break-large: unitlessPx($breakpoint-large);
	$break-small: unitlessPx($breakpoint-small);
	font-size: $font-large;

	@media all and (min-width: #{$break-small}px) and (max-width: #{$break-large - 1}px) {
		font-size: calc(#{$small}px + #{$large - $small} * (100vw - #{$breakpoint-small}) / (#{$break-large} - #{$break-small}));
	}

	@media all and (max-width: #{$break-small - 1}px) {
		font-size: $font-small;
	}
}

@mixin textlink-underline($size: 2px, $offset: false) {
	background-image: linear-gradient(currentColor, currentColor);
	background-position: 0 100%;
	background-repeat: no-repeat;
	background-size: 0 $size;
	transition: background-size 0.2s ease-out;
	@if ($offset) {
		padding-bottom: $size;
	}
	&:hover {
		background-size: 100% $size;
	}
}
